*gram.txt* [Experimental] A item filtering framework for Vim8

Maintainer: mityu <mityu.mail (at) gmail.com>
License: the MIT License
==============================================================================
CONTENTS                                           *gram-contents*

FEATURES                      |gram-features|
REQUIREMENTS                  |gram-requirements|
CUSTOMIZE                     |gram-customize|
  FUNCTIONS                   |gram-functions|
  OPTIONS                     |gram-options|
  AUTOCMD                     |gram-autocmd|
  COLORS                      |gram-color|
  CREATE-MATCHERS             |gram-create-matchers|
  ITEMS                       |gram-item|
CONFIGURATION-EXAMPLES        |gram-configuration-examples|
TODO                          |gram-todo|
KNOWN-ISSUES                  |gram-known-issues|


==============================================================================
FEATURES                                            *gram-features*

- Pseudo asynchronous filtering.
- Available everywhere, of course including command-line and |cmdwin|.

==============================================================================
REQUIREMENTS                                       *gram-requirements*

- Latest version of Vim.
- +popup
- +timer

and maybe some sources require +job.


==============================================================================
CUSTOMIZE                                           *gram-customize*

------------------------------------------------------------------------------
FUNCTIONS                                           *gram-functions*

                                                    *gram#core#setup()*
gram#core#setup({config})
    Start this plugin.  {config} is a dict consists these values:
    (Values marked by (*) are necessary)

    - "sources" (*)
        List of dictionaries which have these values
        - "name" (*)
        - "default_action"


TODO: Write more

------------------------------------------------------------------------------
OPTIONS                                           *gram-options*

TODO: Write

------------------------------------------------------------------------------
AUTOCMD                                           *gram-autocmd*

gram.vim triggers a |User| event with pattern "gram-first-start".
This event is triggered only once at the first calls of |gram#launch()|.
You can use this event to set some configurations like mappings or options.
Example: >
    augroup gram-init
      autocmd!
      autocmd User gram-initialize call s:gram_init()
    augroup END
    function! s:gram_init() abort
      " Set configurations for gram.vim here...
    endfunction
<

------------------------------------------------------------------------------
COLORS                                            *gram-color*


==============================================================================
CONFIGURATION-EXAMPLES                          *gram-configuration-examples*

- Emacs like cursor moves in insert mode. >
    call gram#custom#map_action('i', '<C-f>', 'move-to-right')
    call gram#custom#map_action('i', '<C-b>', 'move-to-left')
    call gram#custom#map_action('i', '<C-a>', 'move-to-head')
    call gram#custom#map_action('i', '<C-e>', 'move-to-tail')
<

==============================================================================
TODO                                                *gram-todo*

 * Rewrite in Vim9 scirpt


==============================================================================
    vim:tw=78:et:ft=help:norl:
