*gram.txt* A filtering plugin for Vim8

Maintainer: mityu <mityu.email (at) gmail.com>
License: the MIT License
==============================================================================
CONTENTS                                           *gram-contents*

FEATURES                      |gram-features|
REQUIREMENTS                  |gram-requirements|
CUSTOMIZE                     |gram-customize|
  FUNCTIONS                   |gram-functions|
  OPTIONS                     |gram-options|
  AUTOCMD                     |gram-autocmd|
  COLORS                      |gram-color|
  BUILT-IN-MATCHERS           |gram-built-in-matchers|
  CREATE-MATCHERS             |gram-create-matchers|
  ITEMS                       |gram-item|
CONFIGURATION-EXAMPLES        |gram-configuration-examples|
SOURCE-EXAMPLES               |gram-source-examples|
TODO                          |gram-todo|
KNOWN-ISSUES                  |gram-known-issues|


==============================================================================
FEATURES                                            *gram-features*

- Asynchronous filtering by using |timer|.
- Available in |cmdwin|.

==============================================================================
REQUIREMENTS                                       *gram-requirements*

- Vim8.1.1799 or later
- +popup
- +timer

and maybe some source requires +job.


==============================================================================
CUSTOMIZE                                           *gram-customize*

------------------------------------------------------------------------------
FUNCTIONS                                           *gram-functions*

                                                    *gram#select()*
gram#select({config} [,{options}])
    Launch this plugin to select an item.
    {config} must have the following entries:
                                                *gram#select()-completefunc*
    - completefunc (Necessary if items entry is omitted)
        |Funcref| or |String| of a function to list items.  The argument is
        the user input and this function must return items to select.  See
        |gram-options-force_refresh| to know when this function is called.

    - items (Optional)
        |List| of items to filter.  You can use this entry as alternative to
        |gram#select()-completefunc|.
        NOTE: If both of completefunc and items entries are specified, only
        completefunc entry is used.

    - name (Optional)
        |String|. The source name.

    - callback (Necessary)
        |Funcref| or |String| of a callback function.  This function is called
        only when the user select a item.  (If selecting is canceled, this
        function won't be called.)  The argument is the selected item.

    {options} are |gram-options|.  You can overwrite the user configrations via
    this argument, but you shouldn't use this a lot.  Plugin's option changes
    may make the users confused.

                                                    *gram#highlight_match()*
gram#highlight_match({pattern})
    Set highlight matching pattern of completions.  You can use |patterns| in
    {pattern}.  The pattern will be highlighted with color of "gramMatch".

                                                    *gram#set_items()*
gram#set_items({items})
    Replace previous base items with {items}. The details of {items} is
    |gram-item|.

                                                    *gram#add_items()*
gram#add_items({items})
    Add {items} to base items.

                                                    *gram#get_items()*
gram#get_items([{kind}])
    Return a list of items of {kind}.  What you can specify as {kind} are:
    "base"          All of the items
    "matched"       Presently shown items

    If {kind} is omitted, return a dictionary with items of "base" and
    "matched".
    Example: >
        echo gram#get_items()
        " => {'base': [{"base" items here...}],
        "       'matched': [{"matched" items here...}]}
<

    Each dictionary item is always structured into |gram-item|, and unspecified
    entry's value will be ""(an empty string).

                                                    *gram#is_active()*
gram#is_active()
    Returns 1 if gram is active; otherwise, returns 0.  This function is
    useful when you make asynchronous matchers or completefunc.

                                                    *gram-mappings*
                                                    *gram#custom#noremap()*
                                                    *gram#custom#map()*
gram#custom#noremap({mode}, {lhs}, {rhs})
gram#custom#map({mode}, {lhs}, {rhs})
    |:noremap| or |:map| for this plugin.
    Map {lhs} to {rhs}, but you cannot overwrite <C-c>.

    {mode} is one of the followings:
    n       Normal mode
    i       Insert mode

    {rhs} is a string or a list of strings.  If you specify a list, the
    strings will evaluated individually.  Because |gram.vim| cannot handle
    mode changes between Normal mode and Insert mode in {rhs}, this function
    is useful to make mappings that has mode change and other actions.
    Example: >
    " Quit gram.vim from insert mode via <C-e>.
    call gram#custom#noremap('i', '<C-e>', ['<ESC>', 'q'])
<
    In |gram.vim|'s window, in normal/insert mode, you can use Vim's built-in
    mappings without [count] except for the following mappings:

    normal mode
    -----------
    <CR>    Select an item
    q,<C-c> Close window

    insert mode
    -----------
    <CR>    Decide input and leave insert mode
    <C-c>   Cancel inputting and leave insert mode

    And, however, |gram.vim| cannot handle built-in mappings that needs more
    than two key inputs to use, like |gg| in normal mode..  If you want to use
    them, please map them to themselves via |gram#custom#noremap()|.  Example
    to enable |gg|: >
    call gram#custom#noremap('n', 'gg', 'gg')
<

                                                    *gram#custom#unmap()*
gram#custom#unmap({mode}, {lhs})
    |:unmap| for this plugin.

                                                    *gram#custom#option()*
gram#custom#set_option({option}, {value})
    Set value of option named {option} to {value}.
    See |gram-options| to know the option list.

                                                    *gram#custom#get_option()*
gram#custom#get_option({option})
    Get the value of option named {option}.

                                                *gram#custom#matcher_add()*
gram#custom#matcher_add({name}, {matcher}, {on-input})
    {name} is a |String| of the matcher's name.  It will be the value of
    |gram-option-matcher|.
    Both of {matcher} and {on-input} are |String| or |Funcref|.  See
    |gram-matcher| for the details.



------------------------------------------------------------------------------
OPTIONS                                           *gram-options*

                                                *gram-option-statusline*
statusline  (Default: "%n(%i/%c)")
    |String|.
    You can use the following modifiers:
        %n  the source name.  Becomes "[No name]" if it's omitted.
        %c  count of the completion items
        %i  index of the selecting item

                                                *gram-option-prompt*
prompt  (Default: ">> ")
    |String|.
    The prompt text.

                                                *gram-options-force_refresh*
force_refresh  (Default: 0)
    |Number| or |Boolean|.
    If this option is set to true, |gram#launch()-completefunc| is called
    whenever the users input keys in insert mode.
    If this option is set to false, |gram#launch()-completefunc| is called
    once just after |gram.vim| opens its window.

                                                *gram-option-matcher*
matcher  (Default: "multi_regexp")
    |String|.
    Specify a matcher to use.  See |gram-built-in-matchers| to know available
    built-in matchers.

                                                *gram-option-nmapclear*
enable_nmapclear  (Default: 1)
    |Number| or |Boolean|.
    If this value is true, all mappings except for normal-mode this plugin's
    are cleared.

                                                *gram-option-imapclear*
enable_imapclear  (Default: 1)
    |Number| or |Boolean|.
    If this value is true, all mappings for insert-mode except this plugin's
    are cleared.

------------------------------------------------------------------------------
AUTOCMD                                           *gram-autocmd*

gram.vim triggers a |User| event with pattern "gram-first-start".
This event is triggered only once at the first calls of |gram#launch()|.
You can use this event to set some configurations like mappings or options.
Example: >
    augroup gram-init
      autocmd!
      autocmd User gram-first-start call s:gram_init()
    augroup END
    function! s:gram_init() abort
      call gram#custom#set_option('prompt', 'PATTERN: ')
      call gram#custom#set_option('force_refresh', 1)
    endfunction
<

------------------------------------------------------------------------------
COLORS                                            *gram-color*

gram.vim uses the following highlight groups for coloring texts.
You can overwrite the default color settings just by setting colors via
|:highlight|.

gramMatch       (Default: Number highlight group)
    The color to show matched strings.

------------------------------------------------------------------------------
BUILT-IN-MATCHERS                                   *gram-built-in-matchers*

multi_regexp
    You can specify multi regexp patterns to filter candidates.  Patterns will
    be separated with spaces.  To include spaces in patterns, please escape
    them with "\".

------------------------------------------------------------------------------
CREATE-MATCHERS                                      *gram-create-matchers*

Register matcher~
You can register your matcher in these two ways:

1. By calling |gram#custom#matcher_add()|.  This way is useful when you want to
  define a matcher in your .vimrc.

2. Define a matcher function in "autoload/gram/source/matcher/{name}.vim"
  If you use this way, you have to implement two functions
  "gram#source#matcher#{name}#matcher()" and
  "gram#source#matcher#{name}#on_input()".
  And, the matcher name will be "{name}".

matcher()~
The matcher function takes one argument: An item. It have to return true if
the item should be in filtered items; otherwise, have to return false.

on_input()~
This function is called when the user-input is changed.  It takes one
argument: the user-input.  You should prepare for calling matcher() in this
function.


------------------------------------------------------------------------------
ITEMS                                             *gram-item*

    {items} must be a list of strings or dictionaries.  When it is a list of
    dictionaries, each dictionary can contain these entries of
    |complete-items|: "word", "abbr", "menu" and "user_data"


==============================================================================
CONFIGURATION-EXAMPLES                          *gram-configuration-examples*

- Emacs like cursor moves in insert mode. >
    call gram#custom#noremap('i', '<C-f>', '<Right>')
    call gram#custom#noremap('i', '<C-b>', '<Left>')
    call gram#custom#noremap('i', '<C-a>', '<C-o>0')
    call gram#custom#noremap('i', '<C-e>', '<C-o>$')
<

==============================================================================
SOURCE-EXAMPLES                                   *gram-source-examples*

- Simple MRU(Most Recently Used) source using |v:oldfiles|. >
    call gram#select({
        \ 'name': 'MRU',
        \ 'items': v:oldfiles,
        \ 'callback': {item -> execute('edit ' . fnameescape(item.word))}
        \ })


==============================================================================
TODO                                                *gram-todo*

* Add tests.
* Add default matchers.
* Add default sources. (They should be other plugins?)
* Add modifiers for |gram-option-statusline|.
* Complete this document.
* Handle [count].
* Use 'timeoutlen'.


==============================================================================
KNOWN-ISSUES                                        *gram-known-issues*

* Screen doesn't scroll.


==============================================================================
    vim:tw=78:et:ft=help:norl:
