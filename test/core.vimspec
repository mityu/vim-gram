Describe gram/core.vim
  Context one source
    Before all
      call gram#source#register('test', {
            \ 'gather_candidates': {c -> c.add(['aaa', 'bbb', 'ccc'])}
            \ })
      call gram#matcher#register('stridx', {
            \ 'match': {items, input, callback ->
            \       callback(filter(items, 'stridx(v:val, input) >= 0'))}
            \ })
      call gram#core#setup({
            \ 'sources': [{'name': 'test', 'matcher': 'stridx'}],
            \ 'UI': '',
            \ })
      function Filter(text)
        let s = gram#core#get_source_dict('test')
        call gram#core#clear_matched_items(s)
        let s.should_invoke_matcher = 1
        let s.items_to_be_filtered = deepcopy(s.candidates)
        call gram#core#invoke_matcher_with_filter_text(a:text)
      endfunction
    End

    After all
      call gram#core#quit()
      call gram#matcher#clear()
      call gram#source#clear()
      delfunction Filter
    End

    Before each
      call gram#core#clear_candidates(gram#core#get_source_dict('test'))
      call gram#core#clear_matched_items(gram#core#get_source_dict('test'))
    End

    It gathers candidates
      Assert Equals([], gram#core#get_matched_items('test'))
      call gram#core#gather_candidates()
      Assert Equals(['aaa', 'bbb', 'ccc'], gram#core#get_matched_items('test'))
      call gram#core#gather_candidates()
      Assert Equals(['aaa', 'bbb', 'ccc'], gram#core#get_candidates('test'))
    End

    It filters candidates
      call gram#core#gather_candidates()
      Assert Equals(['aaa', 'bbb', 'ccc'], gram#core#get_matched_items('test'))

      call Filter('a')
      Assert Equals(['aaa', 'bbb', 'ccc'], gram#core#get_candidates('test'))
      Assert Equals(['aaa'], gram#core#get_matched_items('test'))
    End
  End

  Context multiple source
    Before all
      let g:source_called_order = []
      function GatherCandidates(id, c) abort
        call add(g:source_called_order, a:id)
        call call(a:c.add, [['aaa', 'bbb', 'ccc']])
      endfunction

      let g:matcher_called_order = []
      function Match(id, items, input, callback) abort
        call add(g:matcher_called_order, a:id)
        call call(a:callback, [filter(a:items, 'stridx(v:val, a:input) >= 0')])
      endfunction

      let g:sources = []
      for g:i in range(3)
        call gram#source#register('test' .. g:i, {
              \ 'gather_candidates': funcref('GatherCandidates', [g:i])
              \ })
        call gram#matcher#register('stridx' .. g:i, {
              \ 'match': funcref('Match', [g:i])
            \ })
        call add(g:sources, {'name': 'test' .. g:i, 'matcher': 'stridx' .. g:i})
      endfor
      call gram#core#setup({
            \ 'sources': g:sources,
            \ 'UI': '',
            \ })
      unlet g:i
      unlet g:sources
      function Filter(text)
        for name in ['test0', 'test1', 'test2']
          let s = gram#core#get_source_dict(name)
          call gram#core#clear_matched_items(s)
          let s.should_invoke_matcher = 1
          let s.items_to_be_filtered = deepcopy(s.candidates)
        endfor
        call gram#core#invoke_matcher_with_filter_text(a:text)
      endfunction
    End

    After all
      unlet g:source_called_order
      unlet g:matcher_called_order
      delfunction GatherCandidates
      call gram#core#quit()
      call gram#matcher#clear()
      call gram#source#clear()
      delfunction Filter
    End

    Before each
      for c in ['test0', 'test1', 'test2']
        call gram#core#clear_candidates(gram#core#get_source_dict(c))
        call gram#core#clear_matched_items(gram#core#get_source_dict(c))
      endfor
      let g:source_called_order = []
      let g:matcher_called_order = []
    End

    It lists active sources
      Assert Equals(gram#core#get_active_sources(), ['test0', 'test1', 'test2'])
    End

    It gathers candidates from sources in specified order
      call gram#core#gather_candidates()
      Assert Equals(g:source_called_order, range(3))
      for c in ['test0', 'test1', 'test2']
        Assert Equals(gram#core#get_candidates(c), ['aaa', 'bbb', 'ccc'])
      endfor
    End

    It filters items in source priority order
      call gram#core#gather_candidates()
      let g:matcher_called_order = []
      call Filter('b')
      Assert Equals(g:matcher_called_order, range(3))
      for c in ['test0', 'test1', 'test2']
        Assert Equals(gram#core#get_matched_items(c), ['bbb'])
      endfor
    End
  End
End
