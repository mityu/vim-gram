if !has('vimscript-3')
  call g:assert.skip(execute('version') .
        \ "\nThis vim does not have :scriptversion 3")
  finish
endif

Describe items
  Before all
    let g:DoNothing = {-> 0}

    call gram#select({
          \ 'name': 'gram-test',
          \ 'completefunc': g:DoNothing,
          \ 'callback': g:DoNothing,
          \ })

    call gram#module#import('impl')
    let g:StandardizeItems =
          \ themis#helper('scope').funcs('autoload/gram/impl.vim')._standardize_items
  End

  Before each
    call gram#set_items([])
  End

  Describe set_items()
    It sets items.
      let items = g:StandardizeItems(['aaa', 'bbb'])
      call gram#set_items(items)
      sleep 10m  " Wait until filtering finished.
      call g:assert.equals(gram#get_items('base'), items)
      call g:assert.equals(gram#get_items('matched'), items)
    End

    It replaces items.
      call gram#set_items(['aaa', 'bbb'])
      let items = g:StandardizeItems(['ccc'])
      call gram#set_items(items)
      sleep 10m  " Wait until filtering finished.
      call g:assert.equals(gram#get_items('base'), items)
      call g:assert.equals(gram#get_items('matched'), items)
    End
  End

  Describe add_items()
    Before each
      call gram#set_items(g:StandardizeItems(['aaa']))
    End

    It adds items
      let items = g:StandardizeItems(['bbb'])
      call gram#add_items(items)
      sleep 10m  " Wait until filtering finished.
      let items = g:StandardizeItems(['aaa']) + items
      call g:assert.equals(gram#get_items('base'), items)
      call g:assert.equals(gram#get_items('matched'), items)
    End
  End

  After all
    call gram#module#import('window').background()
    unlet g:StandardizeItems
  End
End


Describe filtering with matcher
  Before all
    let s:counter = {'_default': 0, '_count': 0}
    function! s:counter.restart() abort
      let self._count = self._default
    endfunction
    function! s:counter.decrement() abort
      let self._count -= 1
    endfunction
    function! s:counter.get() abort
      return self._count
    endfunction
    function! s:counter.set(count) abort
      let self._default = a:count
      call self.restart()
    endfunction
    function! s:wait_filtering() abort
      call s:counter.restart()
      while s:counter.get() > 0
        sleep 10m
      endwhile
    endfunction

    let s:matcher = {'_input': ''}
    function! s:matcher.on_input(input) abort
      let self._input = a:input
    endfunction
    function! s:matcher.matcher(item) abort
      call s:counter.decrement()
      return stridx(a:item.word, self._input) != -1
    endfunction

    call gram#custom#matcher_add('gram-test', s:matcher.matcher,
          \ s:matcher.on_input)
    call gram#custom#set_option('matcher', 'gram-test')

    let g:DoNothing = {-> 0}
    call gram#select({
          \ 'name': 'gram-test',
          \ 'completefunc': g:DoNothing,
          \ 'callback': g:DoNothing,
          \ })

    call gram#module#import('impl')
    let g:StandardizeItems =
          \ themis#helper('scope').funcs('autoload/gram/impl.vim')._standardize_items

    call gram#custom#map_action('i', '@', ['move-to-tail', 'delete-to-head'])
    call gram#custom#map_action('n', 'i', 'start-insert')
    call gram#custom#map_action('i', '<Esc>', 'stop-insert')
  End

  Before each
    execute "normal! i@\<ESC>"
    call gram#set_items([])
  End

  It filters items.
    call s:counter.set(3)
    let items = g:StandardizeItems(['aaa', 'bbb', 'abb'])
    call gram#set_items(items)

    execute "normal! ia\<ESC>"
    call s:wait_filtering()
    call g:assert.equals(gram#get_items('matched'),
          \ g:StandardizeItems(['aaa', 'abb']))

    execute "normal! ia\<ESC>"
    call s:wait_filtering()
    call g:assert.equals(gram#get_items('matched'),
          \ g:StandardizeItems(['aaa']))
  End

  It filters items added with add_items().
    call s:counter.set(3)
    let items = g:StandardizeItems(['aaa', 'bbb'])
    let new_item = g:StandardizeItems(['abb'])
    call gram#set_items(items)
    execute "normal! ia\<ESC>"
    call gram#add_items(new_item)
    sleep 1
    " call s:wait_filtering()
    call g:assert.equals(gram#get_items('matched'),
          \ g:StandardizeItems(['aaa', 'abb']))
  End

  After all
    call gram#custom#unmap('i', '@')
    call gram#module#import('window').background()
    unlet g:StandardizeItems
  End
End
