Describe gram/mapping.vim
  " Before all
  "   call gram#mapping#add_mode('testmode')
  " End

  Before each
    call gram#mapping#_clear_entire_mapping()
    call gram#mapping#_clear_input_queue()
    call gram#mapping#add_mode('testmode')
  End

  Describe add_typed_key()
    It adds given string to input_queue
      call gram#mapping#add_typed_key('a')
      Assert Equals(gram#mapping#_get_input_queue(), 'a')
      call gram#mapping#add_typed_key('b')
      Assert Equals(gram#mapping#_get_input_queue(), 'ab')
    End
  End

  Describe add_mode()
    After each
      call gram#mapping#_clear_entire_mapping()
    End
    It adds mode
      call gram#mapping#_clear_entire_mapping()
      Assert Equals(gram#mapping#_get_maptree_sets(), {})
      call gram#mapping#add_mode('testmode')
      Assert Equals(gram#mapping#_get_maptree_sets(), {'testmode': {}})
    End
  End

  Describe noremap()
    Before each
      call gram#mapping#_clear_entire_mapping()
      call gram#mapping#add_mode('testmode')
    End

    After all
      call gram#mapping#_clear_entire_mapping()
    End

    It adds mapping (depth = 1)
      call gram#mapping#noremap('testmode', 'a', 'testmode-a')
      Assert Equals(gram#mapping#_get_maptree_sets(),
            \{'testmode': {'a': {'rhs': {'nomore': 1, 'mapto': 'testmode-a'}}}})
    End

    It adds mapping (depth = 2)
      call gram#mapping#noremap('testmode', 'ab', 'testmode-ab')
      Assert Equals(gram#mapping#_get_maptree_sets(),
            \{'testmode': {'a': {'b': {'rhs': {'nomore': 1, 'mapto': 'testmode-ab'}}}}})
    End
  End

  Describe lookup_mapping()
    Before all
      function LookupMapping() abort
        return gram#mapping#lookup_mapping('testmode')
      endfunction
    End

    After all
      delfunction LookupMapping
    End

    Context noremap only
      It finds mapping 1
        call gram#mapping#noremap('testmode', 'a', 'testmode-a')
        call gram#mapping#add_typed_key('a')
        Assert Equals(LookupMapping().resolved, 'testmode-a')
        Assert Equals(gram#mapping#_get_input_queue(), '')
      End

      It finds mapping 2
        call gram#mapping#noremap('testmode', 'ab', 'testmode-ab')
        call gram#mapping#add_typed_key('ab')
        Assert Equals(LookupMapping().resolved, 'testmode-ab')
        Assert Equals(gram#mapping#_get_input_queue(), '')
      End

      It finds mapping 3
        call gram#mapping#noremap('testmode', 'a', 'testmode-a')
        call gram#mapping#noremap('testmode', 'ab', 'testmode-ab')
        call gram#mapping#add_typed_key('ab')
        Assert Equals(LookupMapping().resolved, 'testmode-ab')
        Assert Equals(gram#mapping#_get_input_queue(), '')
      End

      It finds mapping 4
        call gram#mapping#noremap('testmode', 'a', 'testmode-a')
        call gram#mapping#add_typed_key('abc')
        Assert Equals(LookupMapping().resolved, 'testmode-a')
        Assert Equals(gram#mapping#_get_input_queue(), 'bc')
      End

      It finds mapping 5
        call gram#mapping#noremap('testmode', 'abc', 'testmode-abc')
        call gram#mapping#noremap('testmode', 'abcde', 'testmode-abcde')
        call gram#mapping#add_typed_key('abcdf')
        Assert Equals(LookupMapping().resolved, 'testmode-abc')
        Assert Equals(gram#mapping#_get_input_queue(), 'df')
      End


      It finds no mapping 1
        call gram#mapping#noremap('testmode', 'a', 'testmode-a')
        call gram#mapping#add_typed_key('b')
        Assert Equals(LookupMapping().resolved, 'b')
        Assert Equals(gram#mapping#_get_input_queue(), '')
      End

      It finds no mapping 2
        call gram#mapping#add_typed_key('a')
        Assert Equals(LookupMapping().resolved, 'a')
        Assert Equals(gram#mapping#_get_input_queue(), '')
      End

      It waits for more key typed
        call gram#mapping#noremap('testmode', 'a', 'testmode-a')
        call gram#mapping#noremap('testmode', 'ab', 'testmode-ab')
        call gram#mapping#add_typed_key('a')
        Assert Equals(LookupMapping().resolved, '')
        Assert Equals(gram#mapping#_get_input_queue(), 'a')
      End

      It finds mapping with invalid prefix in input
        call gram#mapping#noremap('testmode', 'abc', 'testmode-abc')
        call gram#mapping#noremap('testmode', 'wan', 'testmode-wan')
        call gram#mapping#add_typed_key('wabc')
        Assert Equals(LookupMapping().resolved, 'w')
        Assert Equals(LookupMapping().resolved, 'testmode-abc')

        call gram#mapping#add_typed_key('wwabc')
        Assert Equals(LookupMapping().resolved, 'w')
        Assert Equals(LookupMapping().resolved, 'w')
        Assert Equals(LookupMapping().resolved, 'testmode-abc')
      End
    End

    Context noremap and map are mixtured
      It finds mapping
        call gram#mapping#map('testmode', 'a', 'testmode-map-a')
        call gram#mapping#noremap('testmode', 'testmode-map-a', 'testmode-noremap-a')
        call gram#mapping#add_typed_key('a')
        Assert Equals(LookupMapping().resolved, 'testmode-noremap-a')
        Assert Equals(gram#mapping#_get_input_queue(), '')
      End

      It finds the remaped rhs not exist
        call gram#mapping#map('testmode', 'a', 'testmode-map-a')
        call gram#mapping#add_typed_key('a')
        Assert Equals(LookupMapping().resolved, 't')
        Assert Equals(gram#mapping#_get_input_queue(), 'estmode-map-a')
      End
    End

    Context handle_count is off
      Before each
        call gram#mapping#set_mode_options('testmode', {'handle_count': 0})
      End

      After all
        call gram#mapping#set_mode_options('testmode',
              \gram#mapping#_get_default_mode_options())
      End

      It resolves mapping with a 1 digit count
        call gram#mapping#add_typed_key('2a')
        Assert Equals(LookupMapping(),
              \ {'resolved': '2', 'count': 0, 'count1': 1})
      End

      It resolves mapping with a several digits count
        call gram#mapping#add_typed_key('12a')
        Assert Equals(LookupMapping(),
              \ {'resolved': '1', 'count': 0, 'count1': 1})
      End

      It cooperates with count in rhs by noremap
        call gram#mapping#noremap('testmode', 'a', '2mapped-a')
        call gram#mapping#add_typed_key('1a')
        Assert Equals(LookupMapping(),
              \ {'resolved': '1', 'count': 0, 'count1': 1})
        Assert Equals(gram#mapping#_get_input_queue(), 'a')

        Assert Equals(LookupMapping(),
              \ {'resolved': '2mapped-a', 'count': 0, 'count1': 1})
        Assert Equals(gram#mapping#_get_input_queue(), '')
      End

      It cooperates with count in rhs by map
        call gram#mapping#map('testmode', 'a', '2mapped-a')
        call gram#mapping#add_typed_key('1a')
        Assert Equals(LookupMapping(),
              \ {'resolved': '1', 'count': 0, 'count1': 1})
        Assert Equals(gram#mapping#_get_input_queue(), 'a')
        Assert Equals(LookupMapping(),
              \ {'resolved': '2', 'count': 0, 'count1': 1})
        Assert Equals(gram#mapping#_get_input_queue(), 'mapped-a')
      End
    End

    Context with [count]
      Before all
        call gram#mapping#set_mode_options('testmode', {'handle_count': 1})
      End

      After all
        call gram#mapping#set_mode_options('testmode',
              \gram#mapping#_get_default_mode_options())
      End

      It resolves mapping
        call gram#mapping#add_typed_key('a')
        Assert Equals(LookupMapping(),
              \ {'resolved': 'a', 'count': 0, 'count1': 1})
      End

      It resolves mapping with a 1 digit count
        call gram#mapping#add_typed_key('2a')
        Assert Equals(LookupMapping(),
              \ {'resolved': 'a', 'count': 2, 'count1': 2})
      End

      It resolves mapping with a several digits count
        call gram#mapping#add_typed_key('12a')
        Assert Equals(LookupMapping(),
              \ {'resolved': 'a', 'count': 12, 'count1': 12})
      End

      It cooperates with count in rhs by noremap
        call gram#mapping#noremap('testmode', 'a', '2mapped-a')
        call gram#mapping#add_typed_key('1a')
        Assert Equals(LookupMapping(),
              \ {'resolved': 'mapped-a', 'count': 12, 'count1': 12})
        Assert Equals(gram#mapping#_get_input_queue(), '')
      End

      It cooperates with count in rhs by noremap and extra suffix
        call gram#mapping#noremap('testmode', 'a', '2mapped-a')
        call gram#mapping#add_typed_key('1abc')
        Assert Equals(LookupMapping(),
              \ {'resolved': 'mapped-a', 'count': 12, 'count1': 12})
        Assert Equals(gram#mapping#_get_input_queue(), 'bc')
      End

      It cooperates with count in rhs by map
        call gram#mapping#map('testmode', 'a', '2mapped-a')
        call gram#mapping#add_typed_key('1a')
        Assert Equals(LookupMapping(),
              \ {'resolved': 'm', 'count': 12, 'count1': 12})
        Assert Equals(gram#mapping#_get_input_queue(), 'apped-a')
      End

      It can find mapping when it's consisted only by digits
        call gram#mapping#noremap('testmode', '23', 'mapped-23')
        call gram#mapping#add_typed_key('23')
        Assert Equals(LookupMapping(),
              \ {'resolved': 'mapped-23', 'count': 0, 'count1': 1})

      End

      It tells count and mapping apart
        call gram#mapping#noremap('testmode', '23', 'mapped-23')
        call gram#mapping#add_typed_key('223')
        Assert Equals(LookupMapping(),
              \ {'resolved': 'mapped-23', 'count': 2, 'count1': 2})
      End
    End
  End

  Describe unmap()
    Before all
      function LookupMapping() abort
        return gram#mapping#lookup_mapping('testmode')
      endfunction
    End

    Before each
      call gram#mapping#_clear_entire_mapping()
      call gram#mapping#add_mode('testmode')
    End

    After all
      call gram#mapping#_clear_entire_mapping()
      delfunction LookupMapping
    End

    It removes mapping 1
      call gram#mapping#noremap('testmode', 'abc', 'rhs-abc')
      call gram#mapping#unmap('testmode', 'abc')
      Assert Equals(gram#mapping#_get_maptree_sets(), {'testmode': {}})
    End

    It removes mapping 2
      call gram#mapping#noremap('testmode', 'abc', 'rhs-abc')
      call gram#mapping#noremap('testmode', 'abd', 'rhs-abd')
      call gram#mapping#unmap('testmode', 'abc')

      call gram#mapping#add_typed_key('abc')
      Assert Equals(LookupMapping().resolved, 'a')
      Assert Equals(gram#mapping#_get_input_queue(), 'bc')

      call gram#mapping#_clear_input_queue()
      call gram#mapping#add_typed_key('abd')
      Assert Equals(LookupMapping().resolved, 'rhs-abd')
      Assert Equals(gram#mapping#_get_input_queue(), '')
      Assert Equals(gram#mapping#_get_maptree_sets(), {'testmode':
            \ {'a': {'b': {'d': {'rhs': {'nomore': 1, 'mapto': 'rhs-abd'}}}}}
            \ })
    End

    It removes mapping 3
      call gram#mapping#noremap('testmode', 'abcefg', 'rhs-abcefg')
      call gram#mapping#noremap('testmode', 'abd', 'rhs-abd')
      call gram#mapping#unmap('testmode', 'abcefg')

      call gram#mapping#add_typed_key('abcefg')
      Assert Equals(LookupMapping().resolved, 'a')
      Assert Equals(gram#mapping#_get_input_queue(), 'bcefg')

      call gram#mapping#_clear_input_queue()
      call gram#mapping#add_typed_key('abd')
      Assert Equals(LookupMapping().resolved, 'rhs-abd')
      Assert Equals(gram#mapping#_get_input_queue(), '')
      Assert Equals(gram#mapping#_get_maptree_sets(), {'testmode':
            \ {'a': {'b': {'d': {'rhs': {'nomore': 1, 'mapto': 'rhs-abd'}}}}}
            \ })
    End

    It removes mapping 4
      call gram#mapping#noremap('testmode', 'ab', 'rhs-ab')
      call gram#mapping#noremap('testmode', 'a', 'rhs-a')
      call gram#mapping#unmap('testmode', 'a')
      Assert Equals(gram#mapping#_get_maptree_sets(), {'testmode':
            \ {'a': {'b': {'rhs': {'nomore': 1, 'mapto': 'rhs-ab'}}}}
            \})
    End

    It removes mapping 5
      call gram#mapping#noremap('testmode', 'ab', 'rhs-ab')
      call gram#mapping#noremap('testmode', 'acde', 'rhs-acde')
      call gram#mapping#unmap('testmode', 'acde')
      Assert Equals(gram#mapping#_get_maptree_sets(), {'testmode':
            \ {'a': {'b': {'rhs': {'nomore': 1, 'mapto': 'rhs-ab'}}}}
            \})
    End

    It removes mapping 6
      call gram#mapping#noremap('testmode', 'ab', 'rhs-ab')
      call gram#mapping#noremap('testmode', 'acde', 'rhs-acde')
      call gram#mapping#noremap('testmode', 'acdf', 'rhs-acdf')
      call gram#mapping#unmap('testmode', 'acde')
      Assert Equals(gram#mapping#_get_maptree_sets(), {'testmode':
            \ {'a': {
            \  'b': {'rhs': {'nomore': 1, 'mapto': 'rhs-ab'}},
            \  'c': {'d': {'f': {'rhs': {'nomore': 1, 'mapto': 'rhs-acdf'}}}}
            \ }}})
    End




  End

  " Describe timeoutlen
  "   Before all
  "     let g:backed = []
  "     function TimeoutlenCallback(r)
  "       call add(g:backed, a:r.resolved)
  "     endfunction
  "     call gram#mapping#set_callback_on_timeout('TimeoutlenCallback')
  "   End
  " 
  "   After all
  "     unlet g:backed
  "     delfunc TimeoutlenCallback
  "   End
  " 
  "   Before each
  "     call gram#mapping#set_timeoutlen(1)
  "     call gram#mapping#_clear_input_queue()
  "   End
  " 
  "   After each
  "     call gram#mapping#stop_timeoutlen_timer()
  "     let g:backed = []
  "   End
  " 
  "   It notifies timeout
  "     call gram#mapping#add_typed_key('abc')
  "     call gram#mapping#start_timeoutlen_timer()
  "     sleep 30m
  "     Assert Equals(g:backed, ['a', 'b', 'c'])
  "     Assert Equals(gram#mapping#_get_input_queue(), '')
  "   End
  " 
  "   It quits working if stop_timeoutlen_timer() is called
  "     call gram#mapping#set_timeoutlen(10)
  "     call gram#mapping#add_typed_key('abc')
  "     call gram#mapping#start_timeoutlen_timer()
  "     call gram#mapping#stop_timeoutlen_timer()
  "     sleep 30m
  "     Assert Equals(g:backed, [])
  "     Assert Equals(gram#mapping#_get_input_queue(), 'abc')
  "   End
  " 
  "   It does not call callback when the input queue is empty
  "     let g:backed = ['initial']
  "     call gram#mapping#start_timeoutlen_timer()
  "     sleep 30m
  "     Assert Equals(g:backed, ['initial'])
  "   End
  " End
End
