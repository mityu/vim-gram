if !has('vimscript-3')
  call g:assert.skip(execute('version') .
        \ "\nThis vim does not have :scriptversion 3")
  finish
endif

let s:func = themis#helper('scope').funcs('autoload/gram/mapping.vim')
call themis#func_alias(s:func)

Describe gram/mapping.vim
  Describe s:_get_escaped_mapchar()
    It doesn't escape a non-special key.
      call g:assert.equal(s:func._get_escaped_mapchar('a'), 'a')
    End

    It doesn't escape an escaped special key
      call g:assert.equal(s:func._get_escaped_mapchar("\<C-w>"), "\<C-w>")
    End

    It escapes a special key.
      call g:assert.equal(s:func._get_escaped_mapchar('<C-w>'), "\<C-w>")
    End
  End

  Describe s:_unify_mapchar()
    It escapes every special keys in string - 1.
      call g:assert.equal(
            \ s:func._unify_mapchar('a<C-w>b<C-a>c'),
            \ "a\<C-w>b\<C-a>c"
            \ )
    End

    It escapes every special keys in string - 2.
      call g:assert.equal(
            \ s:func._unify_mapchar('a<C-w><C-a>c'),
            \ "a\<C-w>\<C-a>c"
            \ )
    End
  End

  Describe s:_get_rhs()
    Before all
      call gram#module#import('mapping')  " Call __init__()

      call s:func.noremap('n', 'a', 'aa')
      call s:func.noremap('n', 'g', 'gg')
      call s:func.noremap('n', 'ga', 'gga')
      call s:func.noremap('n', 'gb', 'ggb')
    End

    After all
      call s:func.unmap('n', 'a')
      call s:func.unmap('n', 'g')
      call s:func.unmap('n', 'ga')
      call s:func.unmap('n', 'gb')
    End

    It returns {rhs} 1.
      call g:assert.equals(
            \ s:func._get_rhs('n', ['a']),
            \ [{'key': ['aa'], 'kind': 'noremap'}, []]
            \ )
    End

    It returns {rhs} 2.
      call g:assert.equals(
            \ s:func._get_rhs('n', ['a', 'a']),
            \ [{'key': ['aa'], 'kind': 'noremap'}, ['a']]
            \ )
    End

    It doesn't return any keys if {lhs} didn't find.
      call g:assert.equals(
            \ s:func._get_rhs('n', ['b']),
            \ [{'key': ['b'], 'kind': 'noremap'}, []]
            \ )
    End

    It returns {rhs} with its strchars({lhs}) >= 2.
      call g:assert.equals(
            \ s:func._get_rhs('n', ['g', 'a']),
            \ [{'key': ['gga'], 'kind': 'noremap'}, []]
            \ )
    End

    It doesn't return any keys if {lhs} isn't completed.
      call g:assert.equals(
            \ s:func._get_rhs('n', ['g']),
            \ [{'key': [], 'kind': 'noremap'}, []]
            \ )
    End
  End
End
